<?xml version="1.0" encoding="utf-8"?>
<s:List xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		direction="ltr" width="100%"
		height="100%"
		verticalScrollPolicy="off"
		click="onLongTouch(event)"
		creationComplete="onCreationComplete()"
		itemRenderer="com.hg94.seti.view.WaterfallTileRenderer" dataProvider="{this.model.currentAssignment.observationRange.filenameArray}">
	<!--
	Explanation of why we are setting the "verticalScrollPolicy" on an s:List with a Horizontal layout
	http://opensource.adobe.com/wiki/display/flexsdk/Bounce+and+Pull+Effects+for+List+Specification
	-->
	<fx:Declarations>
		<s:ContentCache id="waterfallContentCache" enableQueueing="true" enableCaching="true" maxCacheEntries="300" />
	</fx:Declarations>
	<s:layout>
		<s:HorizontalLayout gap="0"/>
	</s:layout>
	<fx:Script>
		<![CDATA[

			// Copyright 2011 Adobe Systems Incorporated. All Rights Reserved.
			// NOTICE: Adobe permits you to use, modify, and distribute this file
			//  in accordance with the terms of the Mozilla Public License (MPL) v1.1.

			import com.hg94.seti.model.Model;
			import com.hg94.seti.model.WaterfallTile;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			
			[Bindable]
			public var percentScrolled:Number;
			
			[Bindable]
			public var model:Model; 
			
			/**
			 * TODO: Listen for press-and-hold or long touch on the list.
			 * When a user presses-and-holds (long-touches) an image open it in
			 * its own view.
			 */
			private function onLongTouch(event:Event):void
			{
				var selectedWaterfallTile:WaterfallTile = this.selectedItem as WaterfallTile;
				
				if (!selectedWaterfallTile) return;
				
				var imageUrlToUse:String = selectedWaterfallTile.imageURL;
				var messageString:String = "found something interesting in this image using the SETI Explorer Mobile App";
				
				// TODO: Make this less spammy
				//				FacebookAirAndroid.api("me/feed", function(arg0:Object, arg1:Object):void{}, {message:messageString, picture:imageUrlToUse, link:imageUrlToUse}, 'POST'); 
				//				navigator.pushView(com.hg94.seti.views.WaterfallImageView, event.target.data);
			}
			
			override public function set dataProvider(value:IList):void{
				
				// clear existing cache - very important when going to a new assignment
				this.waterfallContentCache.removeAllQueueEntries();
				this.waterfallContentCache.removeAllCacheEntries();
				
				super.dataProvider = value;
				// start precaching of the images
				startPrecachingImages();
				
				//setMinMaxHz();
				callLater(this.updatePercentScrolled);
			}
			
			//-----------------------------------------------------------------
			// Image precaching.
			//-----------------------------------------------------------------
			
			/**
			 * Useful documentation on the 4.5 i6 SDK implementation of the interaction between spark:image and ContentCache
			 * http://opensource.adobe.com/wiki/display/flexsdk/Spark+Image
			 */
			private function startPrecachingImages():void 
			{
				for each (var url:String in this.dataProvider) {
				//{
					//var imageUrl:String = dataProvider.getItemAt(i).toString();
					trace("Loading " + url);
					waterfallContentCache.load( url);
				}
			}
			
			//-----------------------------------------------------------------
			// Frequency label.
			//-----------------------------------------------------------------
			
			protected function calcCurrentIndex():Number{
				return Math.floor(scroller.viewport.horizontalScrollPosition/256);
			}
			
			protected function onViewportUpdate(event:Event=null):void{
				this.updatePercentScrolled();
			}
			
			protected function onCreationComplete(event:Event=null):void{
				ChangeWatcher.watch(scroller.viewport, "horizontalScrollPosition", onViewportUpdate);
			}

			/**
			protected function setMinMaxHz():void{
				var dp:ArrayCollection = dataProvider as ArrayCollection;
				var firstFile:String = dp.getItemAt(0).toString();
				var lastFile:String = dp.getItemAt(dp.length -1).toString();
				var i:uint = 2;
				while ((lastFile.indexOf("images") == -1) && i < 5){
					//filenames are malformed from time to time
					lastFile = dp.getItemAt(dp.length -i).toString();
					++i;
				}
				
				//minWavelength = Number(getMhzFromFileName(firstFile)[0]);
				//maxWavelength = Number(getMhzFromFileName(lastFile)[1]);
				minWavelength = 0.0;
				maxWavelength = 100.0
				
				trace(this.minWavelength + ", " + this.maxWavelength);
			}
			
			protected function getMhzFromFileName(file:String):Array{
				//images/chan-1532/chan-1532-3-4458.731468-4458.731734.png
				var parts:Array = file.split("/");
				var stuff:Array = parts[parts.length -1].split("-");
				var first:String = stuff[stuff.length-2].toString();
				var last:String = stuff[stuff.length-1].toString().split(".")[0].toString();
				return [first, last];
			}
			 */
			
			protected function updatePercentScrolled():void{
				
				var max:Number = dataGroup.contentWidth;
				var current:Number = scroller.viewport.horizontalScrollPosition;
				//var toEnd:Number = Math.abs(visualizationTileList.layout.getHorizontalScrollPositionDelta(NavigationUnit.END));
				//var toBeginning:Number = Math.abs(visualizationTileList.layout.getHorizontalScrollPositionDelta(NavigationUnit.HOME));
				if (current == 0) {
					//var fractional:Number = (scroller.viewport.width/max) * (maxWavelength - minWavelength);
					//this.percentScrolled = scroller.viewport.width/max/2
					//midFrequency = minWavelength + (fractional/2);
					//return;
					current = scroller.viewport.width / 2;
				}
				this.percentScrolled = current/max;
				/*
					var percThrough:Number = current/max;
					var freq:Number = ((maxWavelength - minWavelength) * percThrough) + minWavelength;
					if (!isNaN(freq)){
						midFrequency = freq;
					}
				}
				*/
			}
		]]>
	</fx:Script>
</s:List>
