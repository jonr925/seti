<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="Stars" 
		preinitialize="view1_preinitializeHandler(event)">
	<s:states>
		<s:State name="starsOnly"/>
		<s:State name="showDetails"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapOptions;
			import com.google.maps.MapType;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.extras.planetary.Sky;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.styles.FillStyle;
			import com.hg94.seti.model.Observation;
			import com.hg94.seti.model.SETIQuestDataReader;
			import com.hg94.seti.model.Target;
			import com.hg94.seti.model.TargetSet;
			
			import flashx.textLayout.formats.Float;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			private static const HATHERSAGE_MAP_API_KEY:String = "ABQIAAAAEwk3rg5igZgbfHAAaPpdnhS3hwEVAxBLwgX-yCFBjg8qlFo5UxTVUCdE50GpyF9WvX4b62ZJcx0ASA";
			
			protected var _targetSet:TargetSet;
			[Bindable]
			protected var _currentTarget:Target;
			
			private function onMapPreinitialize(event:Event):void {
				var opts:MapOptions = new MapOptions();
				opts.mapTypes = [Sky.VISIBLE_MAP_TYPE];
				opts.zoom = 2;
				opts.backgroundFillStyle = new FillStyle();
				opts.backgroundFillStyle.color = 0x000000;
				event.target.setInitOptions(opts);
			}
			
			private function onMapReady(event:MapEvent):void
			{
				event.target.addMapType(Sky.VISIBLE_MAP_TYPE);
				
				// Just testing markers
				// TODO: Refactor
				
				for each (var target:Target in this._targetSet.targetArray) {
					var marker:Marker = new Marker(target.getGoogleSkyCoordinates());
					marker.addEventListener(MapMouseEvent.CLICK, onMarkerInteraction);
					var markerOptions:MarkerOptions = marker.getOptions();
					markerOptions.radius = 20;
					marker.setOptions(markerOptions);
					event.target.addOverlay(marker);
				}
				
				var zoomControl:ZoomControl = new ZoomControl();
				event.target.addControl(zoomControl);
			}
			
			private function onMarkerInteraction(event:MapMouseEvent):void
			{
				var currentLatLng:LatLng = event.latLng;
				var currentPoint:Point = map.fromLatLngToPoint(event.latLng);
				_currentTarget = this._targetSet.getTargetByGoogleSkyCoordinates(currentLatLng);
				currentState = "showDetails";
			}
			
			private function onZoom(event:TouchEvent):void
			{
				// TODO: Translate zoom-event into zoom level. 
				// Zoom levels are 0 -- fully zoomed out, 
				// to 21+ (or as far as the map can zoom based on 
				// map.getMaxZoomLevel())
				var maxZoomLevel:Number = map.getMaxZoomLevel(Sky.VISIBLE_MAP_TYPE, map.getCenter());
				var currentZoomLevel:Number = map.getZoom();
				
				var zooming:Boolean = true && (maxZoomLevel > currentZoomLevel);
				
				if (zooming)
				{
					currentZoomLevel += 1;
				} else {
					currentZoomLevel -= 1;
				}
				
				map.setZoom(currentZoomLevel);
			}
			
			protected function onExploreObservation(event:Event):void
			{
				currentState = "starsOnly";
				navigator.pushView(com.hg94.seti.views.WaterfallExplorerView, _currentTarget);
			}
			
			protected function view1_preinitializeHandler(event:FlexEvent):void {
				
				var setiQuestDataReader:SETIQuestDataReader = new SETIQuestDataReader();
				this._targetSet = setiQuestDataReader.getTargetSet();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Group width="100%" height="100%">
		<maps:Map xmlns:maps="com.google.maps.*"
				  id="map"
				  mapevent_mappreinitialize="onMapPreinitialize(event)"
				  mapevent_mapready="onMapReady(event)"
				  key="{HATHERSAGE_MAP_API_KEY}" url="http://hathersagegroup.com"
				  sensor="false"
				  width="100%" height="100%"/>
		<s:Group right="0" top="10"
				 width.showDetails="30%" width.starsOnly="0" 
				 height="100%">
			<s:layout>
				<s:VerticalLayout gap="10"/>
			</s:layout>
			<s:Button label="Explore observation:" click="onExploreObservation(event)"/>
			<s:Label text="{'Ra: ' + _currentTarget.rightAscension }"/>
			<s:Label text="{'Decl: ' + _currentTarget.declination }"/>
			<s:Label text="{_currentTarget.friendlyName}"/>
		</s:Group>
	</s:Group>
</s:View>
